(include dune.inc)

; Generates rules

(rule
 (targets dune.inc.gen)
 (deps    (package mdx))
 (action
  (with-stdout-to %{targets}
   (progn
    (run ocaml-mdx rule %{dep:pp.md})
    (run ocaml-mdx rule %{dep:ellipsis.md})
    (run ocaml-mdx rule %{dep:envs.md})
    (run ocaml-mdx rule %{dep:empty_line.md})
    (run ocaml-mdx rule %{dep:spaces.md})
    (run ocaml-mdx rule %{dep:errors.md})
    (run ocaml-mdx rule %{dep:heredoc.md})
    (run ocaml-mdx rule %{dep:mlt.md})
    (run ocaml-mdx rule %{dep:semisemi.md})
    (run ocaml-mdx rule %{dep:exit.md})
    (run ocaml-mdx rule %{dep:padding.md})
    (run ocaml-mdx rule %{dep:module_alias.md})
    (run ocaml-mdx rule %{dep:multilines.md})
    (run ocaml-mdx rule %{dep:lines.md})
    (run ocaml-mdx rule %{dep:lwt.md})
    (run ocaml-mdx rule %{dep:non-det.md})
    (run ocaml-mdx rule %{dep:code.md})
    (run ocaml-mdx rule %{dep:set_environment_variable.md})
    (run ocaml-mdx rule %{dep:unset_environment_variable.md})
    (run ocaml-mdx rule --prelude-str "#require \"lwt\"" --prelude-str "toto:let x = \"42\"" %{dep:prelude.md})
    (run ocaml-mdx rule --prelude prelude.ml %{dep:prelude_file.md})
    (run ocaml-mdx rule --direction=to-ml %{dep:dune_rules.md})
    (run ocaml-mdx rule %{dep:require/require-package.md})
    (run ocaml-mdx rule --syntax=cram %{dep:cram.t})
    (run ocaml-mdx rule -s Testing %{dep:section.md})
   ))))

(alias
 (name runtest)
 (action (diff dune.inc dune.inc.gen)))

(alias
 (name   runtest)
 (deps   (:x labels.md) (:y labels.md.expected) (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output -s Testing %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x pp.md) section.md (package mdx))
 (action (progn
           (run ocaml-mdx test %{x})
           (diff? %{x} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x ellipsis-updates.md) (:y ellipsis-updates.md.expected) (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x trailing.md) (:y trailing.md.expected) (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x empty_lines.md) (:y empty_lines.md.expected) (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x interface.md) (:y interface.html.expected) (package mdx))
 (action (progn
           (run mdx output %{x} -o interface.html)
           (diff? %{y} interface.html))))

(alias
 (name   runtest)
 (deps   (:x implementation.md) (:y implementation.html.expected) (package mdx))
 (action (progn
           (run mdx output %{x} -o implementation.html)
           (diff? %{y} implementation.html))))

(alias
 (name   runtest)
 (deps   (:x toplevel.md) (:y toplevel.html.expected) (package mdx))
 (action (progn
           (run mdx output %{x} -o toplevel.html)
           (diff? %{y} toplevel.html))))

(alias
 (name   runtest)
 (deps   (:x output.md) (:y output.html.expected) (package mdx))
 (action (progn
           (run ocaml-mdx output %{x} -o output.html)
           (diff? %{y} output.html))))


(alias
 (name   runtest)
 (deps   (:x dir.md) (package mdx))
 (action (progn
           (run ocaml-mdx test --root "../bin" %{x})
           (diff? %{x} %{x}.corrected))))

(rule (copy dir.md dir2.md))

(alias
 (name   runtest)
 (deps   (:x dir2.md) (:y dir.md.expected) (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output --root=.. %{x})
           (diff? %{y} %{x}.corrected))))
(alias
 (name   runtest)
 (deps   (:x sync_to_md.md)
         (:y sync_to_md.md.expected)
         sync_to_md.ml
         (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output --direction=to-md %{x})
           (diff? %{y} %{x}.corrected))))

(alias
 (name   runtest)
 (deps   (:x sync_to_ml.md) (:y sync_to_ml.md.expected)
         (:a sync_to_ml.ml) (:b sync_to_ml.ml.expected)
         (:c sync_to_broken_ml.ml) (:d sync_to_ml.mli)
         (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output --direction=to-ml %{x})
           (diff? %{y} %{x}.corrected)
           (diff? %{b} %{a}.corrected)
           (diff? %{c} %{c}.corrected)
           (diff? %{d} %{d}.corrected))))

(alias
 (name   runtest)
 (deps   (:x sync_to_empty_ml.md)
         (:a sync_to_empty_ml.ml) (:b sync_to_empty_ml.ml.expected)
         (package mdx))
 (action (progn
           (run ocaml-mdx test --force-output --direction=to-ml %{x})
           (diff? %{b} %{a}.corrected))))

(alias
 (name   runtest)
 (deps   (:x sync_to_ml_with_correct_md.md)
         (:a sync_to_ml_with_correct_md.ml) (:b sync_to_ml_with_correct_md.ml.expected)
         (package mdx))
 (action (progn
           (run ocaml-mdx test --direction=to-ml %{x})
           (diff? %{b} %{a}.corrected))))

(rule
 (targets section.ml)
 (deps    (:x section.md) (package mdx))
 (action  (with-stdout-to %{targets} (run ocaml-mdx pp %{x}))))

(executable
  (name section)
  (modules section))

(rule (with-stdout-to section.out (run ./section.exe)))

(alias
 (name   runtest)
 (deps   (:x section.out) (:y section.out.expected))
 (action (diff? %{x} %{y})))

; Test failures

(rule
 (targets failures.outputs)
 (deps    (package mdx) failures/empty.ml)
 (action
  (with-outputs-to %{targets}
   (progn
    (system "%{bin:ocaml-mdx} test --prelude=a --prelude-str=b %{dep:failures/empty.md} || echo")
    (system "%{bin:ocaml-mdx} test --direction=to-md %{dep:failures/part_not_found.md} || echo")
    (system "%{bin:ocaml-mdx} test --direction=to-md %{dep:failures/ml_file_not_found.md} || echo")
    (system "%{bin:ocaml-mdx} test --direction=to-md %{dep:failures/in_toplevel.md} || echo")
   ))))

(alias
 (name runtest)
 (action (diff failures.expected failures.outputs)))
